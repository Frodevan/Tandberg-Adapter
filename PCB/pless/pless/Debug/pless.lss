
pless.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000218  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000001a4  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000000c0  00800100  00800100  00000218  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000218  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000248  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000030  00000000  00000000  00000288  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000b77  00000000  00000000  000002b8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000a3f  00000000  00000000  00000e2f  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000035b  00000000  00000000  0000186e  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000044  00000000  00000000  00001bcc  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000509  00000000  00000000  00001c10  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000000b5  00000000  00000000  00002119  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000020  00000000  00000000  000021ce  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__ctors_end>
   4:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
   8:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
   c:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  10:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  14:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  18:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  1c:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  20:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  24:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  28:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  2c:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  30:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  34:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  38:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  3c:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  40:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  44:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  48:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  4c:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  50:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  54:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  58:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  5c:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  60:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  64:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  68:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  6c:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  70:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  74:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  78:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  7c:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  80:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  84:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  88:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  8c:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  90:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  94:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  98:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  9c:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  a0:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  a4:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  a8:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  ac:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  b0:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>

000000b4 <__ctors_end>:
  b4:	11 24       	eor	r1, r1
  b6:	1f be       	out	0x3f, r1	; 63
  b8:	cf ef       	ldi	r28, 0xFF	; 255
  ba:	d8 e0       	ldi	r29, 0x08	; 8
  bc:	de bf       	out	0x3e, r29	; 62
  be:	cd bf       	out	0x3d, r28	; 61

000000c0 <__do_clear_bss>:
  c0:	21 e0       	ldi	r18, 0x01	; 1
  c2:	a0 e0       	ldi	r26, 0x00	; 0
  c4:	b1 e0       	ldi	r27, 0x01	; 1
  c6:	01 c0       	rjmp	.+2      	; 0xca <.do_clear_bss_start>

000000c8 <.do_clear_bss_loop>:
  c8:	1d 92       	st	X+, r1

000000ca <.do_clear_bss_start>:
  ca:	a0 3c       	cpi	r26, 0xC0	; 192
  cc:	b2 07       	cpc	r27, r18
  ce:	e1 f7       	brne	.-8      	; 0xc8 <.do_clear_bss_loop>
  d0:	0e 94 be 00 	call	0x17c	; 0x17c <main>
  d4:	0c 94 d0 00 	jmp	0x1a0	; 0x1a0 <_exit>

000000d8 <__bad_interrupt>:
  d8:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000dc <led_strip_write>:
  0 pulse  = 400 ns
  1 pulse  = 850 ns
  "period" = 1300 ns
 */
void __attribute__((noinline)) led_strip_write(rgb_color * colors, unsigned int count) 
{
  dc:	fc 01       	movw	r30, r24
  // Set the pin to be an output driving low.
  LED_STRIP_PORT &= ~(1<<LED_STRIP_PIN);
  de:	45 98       	cbi	0x08, 5	; 8
  LED_STRIP_DDR |= (1<<LED_STRIP_PIN);
  e0:	3d 9a       	sbi	0x07, 5	; 7

  cli();   // Disable interrupts temporarily because we don't want our pulse timing to be messed up.
  e2:	f8 94       	cli
  while(count--)
  e4:	9b 01       	movw	r18, r22
  e6:	21 50       	subi	r18, 0x01	; 1
  e8:	31 09       	sbc	r19, r1
  ea:	67 2b       	or	r22, r23
  ec:	09 f4       	brne	.+2      	; 0xf0 <led_strip_write+0x14>
  ee:	25 c0       	rjmp	.+74     	; 0x13a <led_strip_asm_end28+0x8>
  {
    // Send a color to the LED strip.
    // The assembly below also increments the 'colors' pointer,
    // it will be pointing to the next color at the end of this loop.
    asm volatile(
  f0:	01 90       	ld	r0, Z+
  f2:	00 80       	ld	r0, Z
  f4:	07 d0       	rcall	.+14     	; 0x104 <send_led_strip_byte28>
  f6:	02 90       	ld	r0, -Z
  f8:	05 d0       	rcall	.+10     	; 0x104 <send_led_strip_byte28>
  fa:	01 90       	ld	r0, Z+
  fc:	01 90       	ld	r0, Z+
  fe:	01 90       	ld	r0, Z+
 100:	01 d0       	rcall	.+2      	; 0x104 <send_led_strip_byte28>
 102:	17 c0       	rjmp	.+46     	; 0x132 <led_strip_asm_end28>

00000104 <send_led_strip_byte28>:
 104:	08 d0       	rcall	.+16     	; 0x116 <send_led_strip_bit28>
 106:	07 d0       	rcall	.+14     	; 0x116 <send_led_strip_bit28>
 108:	06 d0       	rcall	.+12     	; 0x116 <send_led_strip_bit28>
 10a:	05 d0       	rcall	.+10     	; 0x116 <send_led_strip_bit28>
 10c:	04 d0       	rcall	.+8      	; 0x116 <send_led_strip_bit28>
 10e:	03 d0       	rcall	.+6      	; 0x116 <send_led_strip_bit28>
 110:	02 d0       	rcall	.+4      	; 0x116 <send_led_strip_bit28>
 112:	01 d0       	rcall	.+2      	; 0x116 <send_led_strip_bit28>
 114:	08 95       	ret

00000116 <send_led_strip_bit28>:
 116:	45 9a       	sbi	0x08, 5	; 8
 118:	00 1c       	adc	r0, r0
 11a:	00 00       	nop
 11c:	00 00       	nop
 11e:	08 f0       	brcs	.+2      	; 0x122 <send_led_strip_bit28+0xc>
 120:	45 98       	cbi	0x08, 5	; 8
	...
 12a:	00 00       	nop
 12c:	08 f4       	brcc	.+2      	; 0x130 <send_led_strip_bit28+0x1a>
 12e:	45 98       	cbi	0x08, 5	; 8
 130:	08 95       	ret

00000132 <led_strip_asm_end28>:
  // Set the pin to be an output driving low.
  LED_STRIP_PORT &= ~(1<<LED_STRIP_PIN);
  LED_STRIP_DDR |= (1<<LED_STRIP_PIN);

  cli();   // Disable interrupts temporarily because we don't want our pulse timing to be messed up.
  while(count--)
 132:	21 50       	subi	r18, 0x01	; 1
 134:	31 09       	sbc	r19, r1
 136:	08 f0       	brcs	.+2      	; 0x13a <led_strip_asm_end28+0x8>
 138:	db cf       	rjmp	.-74     	; 0xf0 <led_strip_write+0x14>
    );

    // Uncomment the line below to temporarily enable interrupts between each color.
    //sei(); asm volatile("nop\n"); cli();
  }
  sei();          // Re-enable interrupts now that we are done.
 13a:	78 94       	sei
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 13c:	8f e3       	ldi	r24, 0x3F	; 63
 13e:	91 e0       	ldi	r25, 0x01	; 1
 140:	01 97       	sbiw	r24, 0x01	; 1
 142:	f1 f7       	brne	.-4      	; 0x140 <led_strip_asm_end28+0xe>
 144:	00 c0       	rjmp	.+0      	; 0x146 <led_strip_asm_end28+0x14>
 146:	00 00       	nop
 148:	08 95       	ret

0000014a <init_led_matrix>:
	_delay_ms(100);
  }
}

//Set A and B to yellow, G and H to Purple
void init_led_matrix(){
 14a:	e0 e0       	ldi	r30, 0x00	; 0
 14c:	f1 e0       	ldi	r31, 0x01	; 1
	uint8_t squares;
	for (squares = 0; squares < SQUARES; squares++){
 14e:	80 e0       	ldi	r24, 0x00	; 0
		{
			chessboard_colors[squares] = (rgb_color){0,0,0};//no color
		}
		else
		{
			chessboard_colors[squares] = (rgb_color){75,51,0};//yellow
 150:	9b e4       	ldi	r25, 0x4B	; 75
 152:	23 e3       	ldi	r18, 0x33	; 51

//Set A and B to yellow, G and H to Purple
void init_led_matrix(){
	uint8_t squares;
	for (squares = 0; squares < SQUARES; squares++){
		if (squares >=48)
 154:	80 33       	cpi	r24, 0x30	; 48
 156:	20 f0       	brcs	.+8      	; 0x160 <init_led_matrix+0x16>
		{
			chessboard_colors[squares] = (rgb_color){75,0,75};//purple
 158:	90 83       	st	Z, r25
 15a:	11 82       	std	Z+1, r1	; 0x01
 15c:	92 83       	std	Z+2, r25	; 0x02
 15e:	09 c0       	rjmp	.+18     	; 0x172 <init_led_matrix+0x28>
		}
		else if(squares > 15)
 160:	80 31       	cpi	r24, 0x10	; 16
 162:	20 f0       	brcs	.+8      	; 0x16c <init_led_matrix+0x22>
		{
			chessboard_colors[squares] = (rgb_color){0,0,0};//no color
 164:	10 82       	st	Z, r1
 166:	11 82       	std	Z+1, r1	; 0x01
 168:	12 82       	std	Z+2, r1	; 0x02
 16a:	03 c0       	rjmp	.+6      	; 0x172 <init_led_matrix+0x28>
		}
		else
		{
			chessboard_colors[squares] = (rgb_color){75,51,0};//yellow
 16c:	90 83       	st	Z, r25
 16e:	21 83       	std	Z+1, r18	; 0x01
 170:	12 82       	std	Z+2, r1	; 0x02
}

//Set A and B to yellow, G and H to Purple
void init_led_matrix(){
	uint8_t squares;
	for (squares = 0; squares < SQUARES; squares++){
 172:	8f 5f       	subi	r24, 0xFF	; 255
 174:	33 96       	adiw	r30, 0x03	; 3
 176:	80 34       	cpi	r24, 0x40	; 64
 178:	69 f7       	brne	.-38     	; 0x154 <init_led_matrix+0xa>
		{
			chessboard_colors[squares] = (rgb_color){75,51,0};//yellow
		}
	}

 17a:	08 95       	ret

0000017c <main>:

    //led_strip_write(colors, LED_COUNT);

    //_delay_ms(5);

	init_led_matrix();
 17c:	0e 94 a5 00 	call	0x14a	; 0x14a <init_led_matrix>
	led_strip_write(chessboard_colors,SQUARES);
 180:	60 e4       	ldi	r22, 0x40	; 64
 182:	70 e0       	ldi	r23, 0x00	; 0
 184:	80 e0       	ldi	r24, 0x00	; 0
 186:	91 e0       	ldi	r25, 0x01	; 1
 188:	0e 94 6e 00 	call	0xdc	; 0xdc <led_strip_write>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 18c:	2f ef       	ldi	r18, 0xFF	; 255
 18e:	81 ee       	ldi	r24, 0xE1	; 225
 190:	94 e0       	ldi	r25, 0x04	; 4
 192:	21 50       	subi	r18, 0x01	; 1
 194:	80 40       	sbci	r24, 0x00	; 0
 196:	90 40       	sbci	r25, 0x00	; 0
 198:	e1 f7       	brne	.-8      	; 0x192 <main+0x16>
 19a:	00 c0       	rjmp	.+0      	; 0x19c <main+0x20>
 19c:	00 00       	nop
 19e:	ee cf       	rjmp	.-36     	; 0x17c <main>

000001a0 <_exit>:
 1a0:	f8 94       	cli

000001a2 <__stop_program>:
 1a2:	ff cf       	rjmp	.-2      	; 0x1a2 <__stop_program>
